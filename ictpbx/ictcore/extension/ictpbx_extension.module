<?php
/******************************************************************
* Copyright Â© 2018 ICT Innovations.                               *
* Developed By: Nasir Iqbal                                       *
* Website : http://www.ictinnovations.com/                        *
* Mail : info@ictinnovations.com                                  *
******************************************************************/

//  $Id: ictpbx_extension.module,v 1.0 2018/12/26 10:40:49 ictinnovations Exp $

use ICT\Core\Account;
use ICT\Core\Program;
use ICT\Core\Program\Faxtoemail;

/**
 * @file
 * Provides support to buy extension through web portal.
 */

/**
 * Implementation of hook_menu().
 */

function ictpbx_extension_menu() {
  $items = array();

  $items['ictcore/extension'] = array(
    'title'            => 'Extensions',
    'description'      => 'Manage Extension Numbers',
    'page callback'    => 'ictpbx_extension_list',
    'page arguments'   => array(false), // hide admin links
    'access callback'  => 'ictcore_access',
    'access arguments' => array('ictpbx extension admin'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => 15,
  );
  $items['ictcore/extension/list'] = array(
    'title'            => 'List',
    'description'      => 'Manage Extension Numbers',
    'page callback'    => 'ictpbx_extension_list',
    'page arguments'   => array('false'), // hide admin links
    'access callback'  => 'ictcore_access',
    'access arguments' => array('ictpbx extension admin'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => 16,
  );
  $items['ictcore/extension/add'] = array(
    'title'            => t('Create New Extension'),
    'description'      => 'Create New Extension',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_extension_form', array()),
    'access callback'  => 'ictcore_access',
    'access arguments' => array('ictpbx extension admin'),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 17,    
  );
  $items['ictcore/extension/batch'] = array(
    'title'            => t('Create Extensions in Batch'),
    'description'      => 'Create Extensions in Batch',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_extension_batch', array()),
    'access callback'  => 'ictcore_access',
    'access arguments' => array('ictpbx extension admin'),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 18,
  );
  $items['ictcore/extension/%ictpbx_extension/edit'] = array(
    'title'            => t('Edit Extension'),
    'description'      => 'Edit Extension',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_extension_form', 2),
    'access callback'  => 'ictcore_access',
    'access arguments' => array('ictpbx extension admin'),
    'type'             => MENU_CALLBACK,
  );
  $items['ictcore/extension/%ictpbx_extension/assign'] = array(
    'title'            => t('Assign Extension'),
    'description'      => 'Assign Extension',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_extension_assign', 2),
    'access callback'  => 'ictcore_access',
    'access arguments' => array('ictpbx extension admin'),
    'type'             => MENU_CALLBACK,
  );
  $items['ictcore/extension/%ictpbx_extension/delete'] = array(
    'title'            => t('Remove Extension'),
    'description'      => 'Remove Extension',
    'page callback'    => 'ictpbx_extension_delete',
    'page arguments'   => array(2),
    'access callback'  => 'ictcore_access',
    'access arguments' => array('ictpbx extension admin'),
    'type'             => MENU_CALLBACK,
  );
  $items['setting/extension'] = array(
    'title'            => 'My Extensions',
    'description'      => 'Manage Incoming Numbers (Extensions)',
    'page callback'    => 'ictpbx_user_extension_list',
    'access callback'  => 'ictfax_access',
    'access arguments' => array('can use ictfax'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => 16,
  );
  $items['setting/extension/%ictpbx_extension/view'] = array(
    'title'            => t('View Extension'),
    'description'      => 'View Extension Detail',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_user_extension_form', 2),
    'access callback'  => 'ictcore_access',
    'access arguments' => array('can use ictfax'),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access on extensionx module.
 */
function ictpbx_extension_permission() {
  return array(
    'ictpbx extension user' => array('title'=> 'ictpbx extension user'),
    'ictpbx extension admin' => array('title'=> 'ictpbx extension admin'),
    'ictpbx extension system admin' => array('title'=> 'ictpbx extension system admin'),
  );
}

/**
 * Page function for extension List
 *
 * It will show a list of available extensions in form of list
 *
 * @return
 * page html
*/
function ictpbx_extension_list($admin_links = false) {

  $header = array(
    array('data' => t('Username'),         'field' => 'username', 'sort' => 'asc'),
    array('data' => t('Extension Number'), 'field' => 'phone', 'sort' => 'asc'),
    array('data' => t('Title'),            'field' => 'first_name'),
    array('data' => t('Assigned To'),      'field' => 'user_username'),
    array('data' => t('Operations')),
  );

  $query = CoreDB::db_select('account', 'a')->extend('PagerDefault');
  $query->fields('a', array('account_id', 'username', 'first_name', 'last_name', 'phone', 'email'));
  $query->leftjoin('usr','u','u.usr_id = a.created_by');
  $query->addfield('u', 'username', 'user_username');
  $query->condition('a.type', 'extension', '=');
  //$query->condition('t.uid', $user->uid,'='); 
  $result = $query->limit(50)         
            ->extend('TableSort')
            ->orderByHeader($header)
            ->execute();

  while ($extension = $result->fetchAssoc()) {
    $row_id = $extension['account_id'];
    $rows[$row_id][] = check_plain($extension['username']);
    $rows[$row_id][] = check_plain($extension['phone']);
    $rows[$row_id][] = check_plain($extension['first_name']);
    $rows[$row_id][] = check_plain($extension['user_username']);

    $rows[$row_id][] = _ictpbx_extension_list_links($extension);
  }
  if (!isset($rows)) {
    $rows[] = array(array('data' => t('No Extension Number available'), 'colspan' => 6));
  }
  
  $output = theme('table', array('header'=>$header, 'rows'=>$rows));
  $output .= theme('pager');

  return $output;
}

/**
 * Build the Forward and Release links for a single extension.
 *
 * @see extension_list()
 */
function _ictpbx_extension_list_links($extension) {
  $links['edit'] = array(
    'title' => t('Edit'),
    'href' => 'ictcore/extension/' . $extension['account_id'] . '/edit',
    'html' => TRUE,
  );
  $links['delete'] = array(
    'title' => t('Remove'),
    'href' => 'ictcore/extension/' . $extension['account_id'] . '/delete',
    'html' => TRUE,
  );
  $links['assign'] = array(
    'title' => t('Assign / Release'),
    'href' => 'ictcore/extension/' . $extension['account_id'] . '/assign',
    'html' => TRUE,
  );
  return theme('links', array('links'=>$links, 'attributes' => array('class' => array('links', 'inline'))));
}

/**
 * Build the extension form.
 */
function ictpbx_extension_form($form, &$form_state, $edit = array()) {
  // It's safe to use on both an empty array, and an incoming array with full or partial data.
  $edit += array(
    'account_id' => '',
    'username'   => '',
    'passwd'     => '',
    'passwd_pin' => '',
    'phone'      => '',
    'first_name' => '',
    'email'      => '',
  );

  // If we're editing an existing fax, we'll add a value field to the form
  // containing the fax's unique ID.
  if (!empty($edit['account_id'])) {
    $form['account_id'] = array(
      '#type'          => 'value',
      '#value'         => $edit['account_id'],
    );
  }

  $form['info'] = array(
    '#type'  => 'fieldset',
    '#title' => t('extension Information'),
  );
  $form['info']['first_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Title'),
    '#default_value' => $edit['first_name'],
  );
  $form['info']['phone'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Extension Number'),
    '#required'      => TRUE,
    '#default_value' => $edit['phone'],
  );
  $form['info']['username'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Username'),
    '#required'      => TRUE,
    '#default_value' => $edit['username'],
  );
  $form['info']['passwd'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Secret / Password'),
    '#required'      => TRUE,
    '#default_value' => $edit['passwd'],
  );
  $form['info']['passwd_pin'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Pin Code'),
    '#default_value' => $edit['passwd'],
  );

  $form['buttons']['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

/**
 * Validate
 *
 */
function ictpbx_extension_form_validate($form, &$form_state) {
  $extension = $form_state['values'];
  if (!isset($extension['account_id'])) {
    $query  = "SELECT account_id FROM account WHERE phone = :phone";
    $result = CoreDB::db_query($query, array(':phone'=>$extension['phone']));
    if ($res = $result->fetchAssoc()) {
      form_set_error('phone', t('Extension already exists!'));
    }

    $query  = "SELECT account_id FROM account WHERE username = :username";
    $result = CoreDB::db_query($query, array(':username'=>$extension['username']));
    if ($res = $result->fetchAssoc()) {
      form_set_error('username', t('Username already exists!'));
    }
    if (!ctype_alnum($extension['username'])) {
      form_set_error('username', t('Invalid username! please use a valid username.'));
    }
  }
}

/**
 * Inserts a new extension, or updates an existing one.
 *
 * @param $extension
 *   A extension to be saved. If $extension['extension_id'] is set, the extension will be updated.
 *   Otherwise, a new extension will be inserted into the database.
 * @return
 *   The saved extension, with its ID set.
 */
function ictpbx_extension_form_submit($form, &$form_state) {
  global $user;

  $data = $form_state['values'];

  // save extension for ictcore
  $extension = array(
    'phone'          => $data['phone'],
    'username'       => $data['username'],
    'passwd'         => $data['passwd'],
    'passwd_pin'     => $data['passwd_pin'],
    'first_name'     => $data['first_name'],
    'type'           => 'extension'
  );

  if (!empty($data['account_id'])) {
    $extension['account_id'] = $data['account_id'];
  }
  if (isset($data['created_by'])) {
    $extension['created_by'] = $data['created_by'];
  }
  if (!isset($data['date_created'])) {
    $extension['date_created'] = time();
  }

  // save the extension
  if (isset($extension['account_id'])) {
    if ($extension['phone'] != $form['info']['phone']['#default_value']) {
      drupal_set_message(t('Extension number changed! Please remember to re-asign Extension to user!'), 'warning');
    }
    CoreDB::db_update('account')->fields($extension)->condition('account_id', $extension['account_id'], '=')->execute();
    drupal_set_message(t('Extension updated successfully!'), 'status');
  } else {
    CoreDB::db_insert('account')->fields($extension)->execute();
    drupal_set_message(t('Extension created successfully!'), 'status');
  }
  
  $form_state['redirect'] = 'ictcore/extension/list';
}

/**
 * Loader function for individual extensions.
 */
function ictpbx_extension_load($extension_id) {
  global $user;

  if (ictcore_access('ictpbx extension admin')) {
    $sql    = "SELECT * FROM account WHERE account_id = :account_id";
    $result = CoreDB::db_query($sql, array(':account_id' => $extension_id));
  } else {
    $sql    = "SELECT * FROM account WHERE account_id = :account_id AND created_by = :created_by";
    $result = CoreDB::db_query($sql, array(':account_id' => $extension_id, ':created_by' => $user->uid));
  }
  if ($extension = $result->fetchAssoc()) {
    return $extension;
  } else {
    drupal_set_message(t('Specified extension does not exist! or you have not proper permissions!'), 'error');
    return FALSE;
  }
}

/**
 * Loader function for all extensions.
 */
function ictpbx_extension_option() {
  $sql    = "SELECT account_id, phone FROM account WHERE type='extension'";
  $result = CoreDB::db_query($sql);
  $rows   = array();
  while ($extension = $result->fetchAssoc()) {
    $row_id = $extension['account_id'];
    $rows[$row_id] = check_plain($extension['phone']);
  }
  if (!isset($rows)) {
    return FALSE;
  }
  return $rows;
}



/**
 * Deletes a extension, given its unique ID.
 *
 * @param $extension
 *   An array of extension containing the ID of a extension.
 */
function ictpbx_extension_delete($extension) {
  global $user;

  include_once "/usr/ictcore/core/Core.php";

  \ICT\Core\do_login($user->uid);
  $oAccount = Account::load($extension['account_id']); // open current account
  $oAccount->delete();                         // and delete it

  drupal_set_message(t('Extension deleted successfully!'), 'status');
  drupal_goto('ictcore/extension/list');
}


/**
 * Build the extension batch form.
 */
function ictpbx_extension_batch($form, &$form_state, $edit = array()) {
  $edit += array(
    'from'       => '',
    'to'         => '',
    'passwd'     => '',
    'passwd_pin' => '',
  );

  $form['info'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Extension Information'),
  );

  $form['info']['from'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Range From'),
    '#required'      => TRUE,
    '#default_value' => $edit['from'],
  );
  $form['info']['to'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Range To'),
    '#required'      => TRUE,
    '#default_value' => $edit['to'],
  );
  $form['info']['passwd'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Secret / Password'),
    '#required'      => TRUE,
    '#default_value' => $edit['passwd'],
  );
  $form['info']['passwd_pin'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Pin Code'),
    '#default_value' => $edit['passwd'],
  );

  $form['buttons']['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

/**
 * Validates extension batch insert
*/
function ictpbx_extension_batch_validate($form, &$form_state) {
  $extension = $form_state['values'];
  
  // validation in case of batch insert
  if ($extension['from'] == '' || $extension['to'] == '') {
    form_set_error('from', t('Both fileds in Extension Range cannot be empty'));    
  } else {
    if (!is_numeric($extension['from']) || !is_numeric($extension['to'])) {
      form_set_error('from', t('Please enter a valid Extension range only numbers are allowed!'));
    } else {
      $query  = "SELECT count(account_id) as num FROM account WHERE phone >= :from AND phone<= :to";
      $result = CoreDB::db_query($query, array(':from'=>$extension['from'], ':to'=>$extension['to']));
      $count = $result->fetchField();
    }
  }
}

/**
 * Creates extensions in batch and saves them.
 */
function ictpbx_extension_batch_submit($form, &$form_state) {
  global $user;

  $extension = $form_state['values'];
  $extension['type'] = 'extension';
  $extension['created_by'] = 0; // no owner

  for ($num = $extension['from']; $num <= $extension['to']; $num++) {
    $extension['phone'] = $num;
    $extension['username'] = $num;
    $extension['first_name'] = $num;
    unset($extension['account_id']);
    CoreDB::db_insert('account')->fields($extension)->execute();
  }

  $form_state['redirect'] = 'ictcore/extension/list';
}

/**
 * Build the extension form.
 */
function ictpbx_extension_assign($form, &$form_state, $edit = array()) {
  $edit += array(
    'phone'      => '',
    'first_name' => '',
    'service'    => '',
  );

  $form['info'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Extension Information'),
  );

  // containing the Extension's unique ID.
  $form['info']['account_id'] = array(
    '#type'          => 'value',
    '#value'         => $edit['account_id'],
  );

 $form['info']['phone'] = array(
    '#type'          => 'item',
    '#title'         => t('Extension Number'),
    '#markup'        => $edit['phone']
  );

  $form['setting'] = array(
    '#type'  => 'fieldset',
    '#title' => t('User Information'),
  );
  $form['setting']['created_by'] = array(
    '#type'          => 'select',
    '#title'         => t('Assign to User'),
    '#required'      => TRUE,
    '#options'       => ictcore_user_option(),
    '#default_value' => $edit['created_by'],
  );

  $form['buttons']['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

/**
 * Validate assign form
 *
 */
function ictpbx_extension_assign_validate($form, &$form_state) {
  $extension = $form_state['values'];
  if (!isset($extension['account_id'])) {
    form_set_error('account_id', t('Invalid reference to existing account!'));
  }
}

/**
 * Inserts a new extension, or updates an existing one.
 *
 * @param $extension
 *   A extension to be saved. If $extension['extension_id'] is set, the extension will be updated.
 *   Otherwise, a new extension will be inserted into the database.
 * @return
 *   The saved extension, with its ID set.
 */
function ictpbx_extension_assign_submit($form, &$form_state) {
  global $user;

  $extension = $form_state['values'];

  if (!isset($extension['created_by']) || empty($extension['created_by'])) {
    $extension['created_by'] = 0;
    $extension['service']    = '';
  }

  include_once "/usr/ictcore/core/Core.php";

  $oAccount = new Account($extension['account_id']); // open current account
  $oAccount->dissociate();                     // dissociate current account from existing user and also remove all programs
  $oAccount->associate($extension['created_by']);    // re-assign to newly selected user

  drupal_set_message(t('Extension assigned successfully!'), 'status');
  $form_state['redirect'] = 'ictcore/extension/list';
} 

/****************************************
* Now ICTFax User to Manage Extensions  *
*****************************************/
/**
 * Page function for extension List
 *
 * It will show a list of available extensions in form of list
 *
 * @return
 * page html
*/
function ictpbx_user_extension_list() {
  global $user;
  $header = array(
    array('data' => t('Extension Number'), 'field' => 'phone',  'sort' => 'asc'),
    array('data' => t('Username'),         'field' => 'username',  'sort' => 'asc'),
    array('data' => t('Title'),            'field' => 'first_name'),
    array('data' => t('Operations')),
  );

  $query = CoreDB::db_select('account', 'a')->extend('PagerDefault');
  $query->fields('a', array('account_id', 'username', 'phone', 'first_name'));
  $query->leftjoin('usr','u','u.usr_id = a.created_by');
  $query->condition('a.type', 'extension', '=');
  $query->condition('u.usr_id', $user->uid , '=');

  $result = $query->limit(50)         
            ->extend('TableSort')
            ->orderByHeader($header)
            ->execute();

  while ($extension = $result->fetchAssoc()) {
    $row_id = $extension['account_id'];
    $rows[$row_id][] = check_plain($extension['phone']);
    $rows[$row_id][] = check_plain($extension['username']);
    $rows[$row_id][] = check_plain($extension['first_name']);

    $rows[$row_id][] = _ictpbx_user_extension_list_links($extension);
  }
  if (!isset($rows)) {
    $rows[] = array(array('data' => t('No Extension Number available'), 'colspan' => 6));
  }

  $output = theme('table', array('header'=>$header, 'rows'=>$rows));
  $output .= theme('pager');

  return $output;
}

/**
 * Build the Forward and Release links for a single extension.
 *
 * @see user_extension_list()
 */
function _ictpbx_user_extension_list_links($extension) {
  $links['view'] = array(
    'title' => t('View'),
    'href' => 'setting/extension/' . $extension['account_id'] . '/view',
    'html' => TRUE,
  );
  return theme('links', array('links'=>$links, 'attributes' => array('class' => array('links', 'inline'))));
}

/**
 * Build the extension form.
 */
function ictpbx_user_extension_form($form, &$form_state, $edit = array()) {
  $edit += array(
    'phone'      => '',
    'username'   => '',
    'passwd'     => '',
    'passwd_pin' => '',
    'first_name' => '',
  );

  $form['info'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Extension Information'),
  );

  // containing the Extension's unique ID.
  $form['info']['account_id'] = array(
    '#type'          => 'value',
    '#value'         => $edit['account_id'],
  );

 $form['info']['username'] = array(
    '#type'          => 'item',
    '#title'         => t('Username'),
    '#markup'        => $edit['username']
  );
 $form['info']['passwd'] = array(
    '#type'          => 'item',
    '#title'         => t('Secret / Password'),
    '#markup'        => $edit['passwd']
  );
 $form['info']['passwd_pin'] = array(
    '#type'          => 'item',
    '#title'         => t('Pin Code'),
    '#markup'        => $edit['passwd_pin']
  );

  $aICTConf = array();
  $confSource = is_file('/etc/ictcore.conf') ? '/etc/ictcore.conf' : '/usr/ictcore/etc/ictcore.conf';
  if (is_file($confSource)) {
    $aICTConf = parse_ini_file($confSource, TRUE);
  }

  $form['setting'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Extension Configuration'),
  );
  $form['setting']['host'] = array(
    '#type'          => 'item',
    '#title'         => t('Host / Proxy'),
    '#markup'        => $aICTConf['provisioning']['host']
  );
  $form['setting']['port'] = array(
    '#type'          => 'item',
    '#title'         => t('Port'),
    '#markup'        => $aICTConf['provisioning']['port']
  );
  $form['setting']['phone'] = array(
    '#type'          => 'item',
    '#title'         => t('Extension Number'),
    '#markup'        => $edit['phone']
  );

  return $form;
}
